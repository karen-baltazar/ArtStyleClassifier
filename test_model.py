# -*- coding: utf-8 -*-
"""test_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aAmsXpw5w1quPkpvs-iJkwDZk-3mJsgk

# **Artist_Style_Identification - Test**

## **Test**
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# %cd "/content/drive/MyDrive/ArtisticStyle/"
!ls

import os
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import load_model
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns

# Cargar el modelo guardado
model_path = 'artist_style_base_model.keras'
loaded_model = load_model(model_path)

# Directorio de prueba
base_dir = 'dataset_v1'
test_dir = os.path.join(base_dir, 'test')

# Configuración del generador de aumento de datos
test_datagen = ImageDataGenerator(rescale=1./255)

# Carga de imágenes
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

# Visualización de imágenes procesadas
images, labels = next(test_generator)

plt.figure(figsize=(12, 12))
for i in range(9):
    plt.subplot(3, 3, i+1)
    plt.imshow(images[i])
    plt.title(f'Label: {labels[i]}')
    plt.axis('off')

plt.show()

# Función para visualizar algunas imágenes de test con sus predicciones
def visualize_predictions(test_generator, test_pred_classes):
    plt.figure(figsize=(15, 10))

    for i in range(6):  # Mostrar las primeras 6 imágenes
        plt.subplot(2, 3, i + 1)

        # Obtener una imagen del generador de test
        image, label = test_generator[i]

        # Mostrar la imagen
        plt.imshow(image[0])

        # Configurar el título con la predicción y el valor real
        title = f'Predicción: {test_pred_classes[i]}, Real: {label[0]}'
        plt.title(title)
        plt.axis('off')

    plt.tight_layout()
    plt.show()

# Predecir clases para el conjunto de test
test_pred = loaded_model.predict(test_generator)
test_pred_classes = np.round(test_pred).flatten()

# Obtener las métricas para el conjunto de test
conf_matrix = confusion_matrix(test_generator.classes, test_pred_classes)
report = classification_report(test_generator.classes, test_pred_classes, target_names=test_generator.class_indices)

# Visualizar la matriz de confusión
print("\nMatriz de confusión (Test):\n")
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False,
            xticklabels=['No Artista', 'Artista'],
            yticklabels=['No Artista', 'Artista'])
plt.title('Matriz de Confusión (Test)')
plt.xlabel('Predicciones')
plt.ylabel('Valores Reales')
plt.show()

# Mostrar el reporte de clasificación
print("\nReporte de clasificación (Test):\n", report)

# Visualizar algunas imágenes de test con sus predicciones
visualize_predictions(test_generator, test_pred_classes)

# Calcular el accuracy para el conjunto de prueba
test_loss, test_accuracy = loaded_model.evaluate(test_generator)
print(f"Accuracy del conjunto de prueba: {test_accuracy * 100:.2f}%")
print("Pérdida durante el prueba:", test_loss)

"""## **Query**"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# %cd "/content/drive/MyDrive/ArtisticStyle/"
!ls

import os
from tensorflow.keras.preprocessing import image

# Cargar el modelo guardado
model_path = 'artist_style_base_model.keras'
loaded_model = load_model(model_path)

# Directorio de prueba para la query
img_path = 'query/50.jpg'

# Preprocesamiento de imagen
img = image.load_img(img_path,  target_size=(224,224))
img_tensor = image.img_to_array(img)
print(img_tensor.shape)
img_tensor = np.expand_dims(img_tensor, axis = 0)
img_tensor /= 255.

# Predicción
confidence = loaded_model.predict(img_tensor)
predict_class = (confidence > 0.5).astype("int32")
print (confidence)
print ("class ", predict_class[0][0])

if predict_class[0][0] == 1:
  print("No artista")
else:
  print("Artista")

plt.imshow(img_tensor[0])
plt.show()