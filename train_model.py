# -*- coding: utf-8 -*-
"""train_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VG5VsXaAz9sykJoeoYmVVXwAvRzqyyn3

# **Artist_Style_Identification**
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# %cd "/content/drive/MyDrive/ArtisticStyle/"
!ls

import os
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

# Directorios de entrenamiento y prueba
base_dir = 'dataset'
train_dir = os.path.join(base_dir,'train')
val_dir = os.path.join(base_dir, 'validation')

# Configuración del generador de aumento de datos
train_datagen = ImageDataGenerator(
    rescale=1./255, # Escalamiento: Ajustar valores de píxeles a [0, 1]
    rotation_range=20,
    # width_shift_range=0.2,
    # height_shift_range=0.2,
    # zoom_range=0.2,
    horizontal_flip=True
)

val_datagen = ImageDataGenerator(rescale=1./255)

# Carga de imágenes [Aumento de datos: Generar nuevas imágenes]
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224), # Redimensionamiento: Ajustar a tamaño específico
    batch_size=32,
    class_mode='binary'
)

val_generator = val_datagen.flow_from_directory(
    val_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

# Visualización de imágenes procesadas
images, labels = next(train_generator)

plt.figure(figsize=(12, 12))
for i in range(9):
    plt.subplot(3, 3, i+1)
    plt.imshow(images[i])
    plt.title(f'Label: {labels[i]}')
    plt.axis('off')

plt.show()

# Carga del modelo ResNet50 previamente entrenado
base_model = ResNet50(weights='imagenet', include_top=False)

# Capas de clasificación personalizadas
model = tf.keras.Sequential()
model.add(base_model)
model.add(GlobalAveragePooling2D())
model.add(Dense(512, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
base_model.trainable = False

# Compilar el modelo
model.compile(loss='binary_crossentropy',
              optimizer=Adam(learning_rate=1e-3),
              metrics=['acc'])

# Mostrar el resumen del modelo
model.summary()

# Entrenar el modelo
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=val_generator
)

# Salvar el modelo
model.save('artist_style_model.h5')